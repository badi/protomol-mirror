import os


# Command Line Options
opts = Options('options.py')
Export('opts')

opts.AddOptions(
    EnumOption('mode', 'Set build mode', 'debug',
               allowed_values = ('debug', 'release')),
    BoolOption('optimize', 'Set to 1 to force optimizations', 0),
    BoolOption('debug', 'Set to 1 to force debug options', 0),
    BoolOption('strict', 'Set to 0 to disable strict options', 1),
    BoolOption('boost', 'Set to 0 to disable boost lib', 1),
    BoolOption('depends', 'Set to 1 to output dependency files', 0),
    EnumOption('compiler', 'Select compiler', 'default',
               allowed_values = ('default', 'gnu', 'intel', 'mingw', 'msvc',
                                 'linux-mingw', 'aix', 'posix', 'hp', 'sgi',
                                 'sun')),
    )


# Create environment and import external PATH
env = Environment(options = opts, ENV = os.environ)
Export('env')

# Configure
conf = Configure(env)
Export('conf')


# Import subdir build files
subsrc = SConscript('protomol/SConscript')


# Generate Help
Help(opts.GenerateHelpText(env))


# Get options
mode = env.get('mode', 'debug')

if env.has_key('optimize'): optimize = int(env['optimize'])
else: optimize = mode == 'release'

if env.has_key('debug'): debug = int(env['debug'])
else: debug = mode == 'debug'

strict = int(env.get('strict', 1))
boost = int(env.get('boost', 1))
compiler = env.get('compiler', 0)
depends = int(env.get('depends', 0))


# Select compiler
if compiler:
    if compiler == 'gnu':
        Tool('gcc')(env)
        Tool('g++')(env)

    elif compiler == 'intel':
        Tool('intelc')(env)
        env['ENV']['INTEL_LICENSE_FILE'] = os.environ.get("INTEL_LICENSE_FILE",
                                                          '')
    elif compiler == 'linux-mingw':
        env.Replace(CC = 'i586-mingw32msvc-gcc')
        env.Replace(CXX = 'i586-mingw32msvc-g++')
        env.Replace(RANLIB = 'i586-mingw32msvc-ranlib')
        env.Replace(PROGSUFFIX = '.exe')

    elif compiler == 'posix':
        Tool('cc')(env)
        Tool('cxx')(env)
        Tool('link')(env)
        Tool('ar')(env)
        Tool('as')(env)

    elif compiler in Split('hp sgi sun aix'):
        Tool(compiler + 'cc')(env)
        Tool(compiler + 'c++')(env)
        Tool(compiler + 'link')(env)

        if compiler in Split('sgi sun'):
            Tool(compiler + 'ar')(env)

    elif compiler != 'default':
        Tool(compiler)(env)


# Debug flags
if debug:
    env.Append(CCFLAGS = '-g -Wall -DDEBUG -DHAVE_DEBUGGER -DHAVE_BACKTRACE')
    if strict: env.Append(CCFLAGS = '-Werror')


# Optimizations
if optimize:
    if env['CXX'] in ['icc', 'icpc']:
        env.Append(CCFLAGS = '-O -finline-functions -funroll-loops')
    elif env['CC'] == 'gcc':
        env.Append(CCFLAGS =
                   '-O9 -ffast-math -finline-functions -funroll-loops')


# Dependency files
if depends:
    env.Append(CCFLAGS = '-MMD -MF ${TARGET}.d')


# Build
libsrc = []
for s in subsrc:
    libsrc.append('#/protomol/' + s)


# Build libprotomol
env.Library('protomol', libsrc)


# Add subdir libs
env.Append(LIBPATH = '.')
env.Append(LIBS = 'protomol')


# Build Protomol
src = ['protomol/main.cpp', 'protomol/modules.cpp']
protomol = env.Program('ProtoMol', src)
Default(protomol)


# Tidy
env.Command('tidy', '', 'rm -f config.log $$(find . -name \*~ -o -name \#*)')

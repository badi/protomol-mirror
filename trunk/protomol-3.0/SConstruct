from __future__ import with_statement
import os
import sys


# Command Line Options
opts = Options('options.py')
Export('opts')

opts.AddOptions(
    EnumOption('mode', 'Set build mode', 'debug',
               allowed_values = ('debug', 'release')),
    BoolOption('optimize', 'Set to 1 to force optimizations', 0),
    BoolOption('debug', 'Set to 1 to force debug options', 0),
    BoolOption('strict', 'Set to 0 to disable strict options', 1),
    BoolOption('depends', 'Set to 1 to output dependency files', 0),
    BoolOption('fah', 'Set to 1 to build library for Folding@Home', 0),
    )


# Create environment and import external PATH
env = Environment(options = opts, ENV = os.environ)
Export('env')

# Configure
conf = Configure(env)
Export('conf')


# Import subdir build files
subsrc = SConscript('protomol/SConscript')


# Generate Help
Help(opts.GenerateHelpText(env))


# Get options
mode = env.get('mode', 'debug')

if env.has_key('optimize'): optimize = int(env['optimize'])
else: optimize = mode == 'release'

if env.has_key('debug'): debug = int(env['debug'])
else: debug = mode == 'debug'

strict = int(env.get('strict', 1))
depends = int(env.get('depends', 0))
fah = int(env.get('fah', 0))



execfile('compiler.py')

# Dependency files
if depends and env['CC'] == 'gcc':
    env.Append(CCFLAGS = '-MMD -MF ${TARGET}.d')

# Include protomol
env.Append(CPPPATH = '#')


# config.h
REV="unknown"
REPO="unknown"
with open('.svn/entries') as f:
    i = 0
    for line in f:
        i = i + 1
        if i > 5: break
        if i == 4: REV = line.strip()
        if i == 5: REPO = line.strip()

execfile('tags.py')
computed_tags = [
    ['REVISION', REV],
    ['SOURCE_REPO', '\n' + REPO],
    ['COMPILER', env.subst('$CXX')],
    ['COMPILER_VERSION', env.subst('$CXXVERSION')],
    ['COMPILER_FLAGS', env.subst('$CXXFLAGS $_CPPDEFFLAGS')],
    ['COMPILER_LIBS', env.subst('$LIBS')],
    ['BUILT_BY', os.environ.get('USER', '')],
    ['PLATFORM', env.subst('$PLATFORM')],
]

with open('protomol/package.h', 'w') as f:
    f.write('#ifndef PROTOMOL_PACKAGE_H\n')
    f.write('#define PROTOMOL_PACKAGE_H\n\n')
    f.write('/************************************************************\n')
    f.write(' * NOTE: This is an autogenerated file.  Please do not edit *\n')
    f.write(' *       directly or check in to revision control.          *\n')
    f.write(' ************************************************************/\n')
    f.write('\n')

    for tag in tags + computed_tags:
        f.write('#define PACKAGE_' + tag[0] + ' ')
        if tag[1].find('\n') != -1:
            i = 0
            for l in tag[1].split('\n'):
                if l != '':
                    i = i + 1
                    if i > 1: f.write('\\n"')
                    f.write('\\\n  "' + l)
            f.write('"\n')
        else:
            f.write('"' + tag[1] + '"\n')

    f.write('\n#endif // PROTOMOL_PACKAGE_H\n')
    env.Append(CPPDEFINES = ['HAVE_PACKAGE_H'])


libname = 'protomol'
if fah: libname = libname + '-fah'
libsrc = []

# Add libprotomol
env.Append(LIBPATH = '.')
env.Append(LIBS = libname)


# libFAH
have_libfah=0
if os.environ.has_key('LIBFAH_HOME'):
    env.Append(CPPPATH = [os.environ['LIBFAH_HOME']])
    env.Append(LIBPATH = [os.environ['LIBFAH_HOME']])
if conf.CheckLib('fah'):
    env.Append(CPPDEFINES = ['HAVE_LIBFAH'])
    have_libfah=1

# pthreads
if env['PLATFORM'] != 'win32' and have_libfah:
    if not conf.CheckLib('pthread'):
        print ('Need libpthreads for Folding@Home GUI server on non-win32 ' +
               'platforms')
        Exit(1)

# Folding@Home library version
if fah:
    if not conf.CheckCXXHeader('fah/core/ChecksumDevice.h'):
        print 'Folding@Home needed please set LIBFAH_HOME'
        Exit(1)
    # Look for boost iostreams
    env.Append(CPPDEFINES = ['BUILD_FOR_FAH'])

    libsrc.append('#/protomol/modules.cpp')

# Build
for s in subsrc:
    libsrc.append('#/protomol/' + s)


# Build libprotomol
env.Library(libname, libsrc)


# Build Protomol
src = ['protomol/main.cpp', 'protomol/modules.cpp']
protomol = env.Program('ProtoMol', src)
Default(protomol)


# Tidy
env.Command('tidy', '', 'rm -f config.log $$(find . -name \*~ -o -name \#*)')
